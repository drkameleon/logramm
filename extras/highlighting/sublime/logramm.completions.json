
{
	"scope": "source.logramm",

	"completions":
	[
		"logramm",

{ "trigger": "allOf", "contents": "allOf(${1:arr}, ${2:value})" },
{ "trigger": "appendItem", "contents": "appendItem(${1:arr}, ${2:item})" },
{ "trigger": "filter", "contents": "filter(${1:arr}, ${2:pattern})" },
{ "trigger": "first", "contents": "first(${1:arr})" },
{ "trigger": "insertItemAtIndex", "contents": "insertItemAtIndex(${1:arr}, ${2:index}, ${3:item})" },
{ "trigger": "isEmpty", "contents": "isEmpty(${1:arr})" },
{ "trigger": "itemAtIndex", "contents": "itemAtIndex(${1:arr}, ${2:index})" },
{ "trigger": "last", "contents": "last(${1:arr})" },
{ "trigger": "map", "contents": "map(${1:arr}, ${2:pattern})" },
{ "trigger": "max", "contents": "max(${1:arr})" },
{ "trigger": "merge", "contents": "merge(${1:arr1}, ${2:arr2})" },
{ "trigger": "min", "contents": "min(${1:arr})" },
{ "trigger": "pop", "contents": "pop(${1:arr})" },
{ "trigger": "prependItem", "contents": "prependItem(${1:arr}, ${2:item})" },
{ "trigger": "push", "contents": "push(${1:arr}, ${2:item})" },
{ "trigger": "removeDuplicates", "contents": "removeDuplicates(${1:arr})" },
{ "trigger": "removeItem", "contents": "removeItem(${1:arr}, ${2:item})" },
{ "trigger": "removeItemAtIndex", "contents": "removeItemAtIndex(${1:arr}, ${2:index})" },
{ "trigger": "reverse", "contents": "reverse(${1:arr})" },
{ "trigger": "search", "contents": "search(${1:arr}, ${2:item})" },
{ "trigger": "setItemAtIndex", "contents": "setItemAtIndex(${1:arr}, ${2:index}, ${3:item})" },
{ "trigger": "slice", "contents": "slice(${1:arr}, ${2:begin}, ${3:end})" },
{ "trigger": "sort", "contents": "sort(${1:arr})" },
{ "trigger": "sum", "contents": "sum(${1:arr})" },
{ "trigger": "contains", "contents": "contains(${1:str}, ${2:what})" },
{ "trigger": "contains", "contents": "contains(${1:arr}, ${2:item})" }
,
{ "trigger": "count", "contents": "count(${1:arr})" },
{ "trigger": "join", "contents": "join(${1:arr}, ${2:delim})" },
{ "trigger": "keys", "contents": "keys(${1:dict})" },
{ "trigger": "length", "contents": "length(${1:str})" },
{ "trigger": "replace", "contents": "replace(${1:str}, ${2:what}, ${3:repl})" },
{ "trigger": "replaceFirst", "contents": "replaceFirst(${1:str}, ${2:what}, ${3:repl})" },
{ "trigger": "split", "contents": "split(${1:str}, ${2:delim})" },
{ "trigger": "values", "contents": "values(${1:dict})" },
{ "trigger": "generate", "contents": "generate(${1:object})" },
{ "trigger": "parse", "contents": "parse(${1:csv})" },
{ "trigger": "allRows", "contents": "allRows(${1:database})" },
{ "trigger": "close", "contents": "close(${1:database})" },
{ "trigger": "create", "contents": "create(${1:database}, ${2:table}, ${3:keys}, ${4:types})" },
{ "trigger": "create", "contents": "create(${1:database}, ${2:table}, ${3:keytypes})" }
,
{ "trigger": "delete", "contents": "delete(${1:database}, ${2:table}, ${3:where})" },
{ "trigger": "insert", "contents": "insert(${1:database}, ${2:table}, ${3:keys}, ${4:values})" },
{ "trigger": "insert", "contents": "insert(${1:database}, ${2:table}, ${3:keyvalues})" }
,
{ "trigger": "lastInsertId", "contents": "lastInsertId(${1:database})" },
{ "trigger": "nextRow", "contents": "nextRow(${1:database})" },
{ "trigger": "open", "contents": "open(${1:database})" },
{ "trigger": "query", "contents": "query(${1:database}, ${2:sql})" },
{ "trigger": "select", "contents": "select(${1:database}, ${2:table}, ${3:what}, ${4:where})" },
{ "trigger": "selectAll", "contents": "selectAll(${1:database}, ${2:table}, ${3:where})" },
{ "trigger": "update", "contents": "update(${1:database}, ${2:table}, ${3:keys}, ${4:values}, ${5:where})" },
{ "trigger": "update", "contents": "update(${1:database}, ${2:table}, ${3:keyvalues}, ${4:where})" }
,
{ "trigger": "deleteItemWithKey", "contents": "deleteItemWithKey(${1:dict}, ${2:key})" },
{ "trigger": "isEmpty", "contents": "isEmpty(${1:dict})" },
{ "trigger": "itemWithKey", "contents": "itemWithKey(${1:dict}, ${2:key})" },
{ "trigger": "keyExists", "contents": "keyExists(${1:dict}, ${2:key})" },
{ "trigger": "setItemWithKey", "contents": "setItemWithKey(${1:dict}, ${2:key}, ${3:item})" },
{ "trigger": "size", "contents": "size(${1:dict})" },
{ "trigger": "append", "contents": "append(${1:filename}, ${2:data})" },
{ "trigger": "delete", "contents": "delete(${1:filename})" },
{ "trigger": "exists", "contents": "exists(${1:filename})" },
{ "trigger": "read", "contents": "read(${1:filename})" },
{ "trigger": "rename", "contents": "rename(${1:fileFrom}, ${2:fileTo})" },
{ "trigger": "write", "contents": "write(${1:filename}, ${2:data})" },
{ "trigger": "parse", "contents": "parse(${1:markup})" },
{ "trigger": "generate", "contents": "generate(${1:object})" },
{ "trigger": "parse", "contents": "parse(${1:json})" },
{ "trigger": "download", "contents": "download(${1:url}, ${2:filepath})" },
{ "trigger": "get", "contents": "get(${1:url})" },
{ "trigger": "post", "contents": "post(${1:url}, ${2:data})" },
{ "trigger": "abs", "contents": "abs(${1:x})" },
{ "trigger": "arccos", "contents": "arccos(${1:x})" },
{ "trigger": "arccosh", "contents": "arccosh(${1:x})" },
{ "trigger": "arcsin", "contents": "arcsin(${1:x})" },
{ "trigger": "arcsinh", "contents": "arcsinh(${1:x})" },
{ "trigger": "arctan", "contents": "arctan(${1:x})" },
{ "trigger": "arctanh", "contents": "arctanh(${1:x})" },
{ "trigger": "ceil", "contents": "ceil(${1:x})" },
{ "trigger": "cos", "contents": "cos(${1:x})" },
{ "trigger": "cosh", "contents": "cosh(${1:x})" },
{ "trigger": "e", "contents": "e()" },
{ "trigger": "exp", "contents": "exp(${1:x})" },
{ "trigger": "floor", "contents": "floor(${1:x})" },
{ "trigger": "fromBase", "contents": "fromBase(${1:str}, ${2:n})" },
{ "trigger": "fromBin", "contents": "fromBin(${1:str})" },
{ "trigger": "fromHex", "contents": "fromHex(${1:str})" },
{ "trigger": "fromOct", "contents": "fromOct(${1:str})" },
{ "trigger": "ln", "contents": "ln(${1:x})" },
{ "trigger": "log", "contents": "log(${1:x})" },
{ "trigger": "number", "contents": "number(${1:str})" },
{ "trigger": "pi", "contents": "pi()" },
{ "trigger": "pow", "contents": "pow(${1:x}, ${2:y})" },
{ "trigger": "round", "contents": "round(${1:x})" },
{ "trigger": "sin", "contents": "sin(${1:x})" },
{ "trigger": "sinh", "contents": "sinh(${1:x})" },
{ "trigger": "sqrt", "contents": "sqrt(${1:x})" },
{ "trigger": "tan", "contents": "tan(${1:x})" },
{ "trigger": "tanh", "contents": "tanh(${1:x})" },
{ "trigger": "trunc", "contents": "trunc(${1:x})" },
{ "trigger": "createDirectory", "contents": "createDirectory(${1:path})" },
{ "trigger": "currentDirectory", "contents": "currentDirectory()" },
{ "trigger": "directory", "contents": "directory(${1:path})" },
{ "trigger": "directoryContents", "contents": "directoryContents(${1:dir})" },
{ "trigger": "directorySeparator", "contents": "directorySeparator()" },
{ "trigger": "expandTilde", "contents": "expandTilde(${1:path})" },
{ "trigger": "extension", "contents": "extension(${1:path})" },
{ "trigger": "filename", "contents": "filename(${1:path})" },
{ "trigger": "isDirectory", "contents": "isDirectory(${1:path})" },
{ "trigger": "isFile", "contents": "isFile(${1:path})" },
{ "trigger": "isSymlink", "contents": "isSymlink(${1:path})" },
{ "trigger": "normalized", "contents": "normalized(${1:path})" },
{ "trigger": "withoutExtension", "contents": "withoutExtension(${1:path})" },
{ "trigger": "callMethod", "contents": "callMethod(${1:func})" },
{ "trigger": "callMethod", "contents": "callMethod(${1:mod}, ${2:func})" }
,
{ "trigger": "callMethodWithArgs", "contents": "callMethodWithArgs(${1:func}, ${2:args})" },
{ "trigger": "callMethodWithArgs", "contents": "callMethodWithArgs(${1:mod}, ${2:func}, ${3:args})" }
,
{ "trigger": "importPackage", "contents": "importPackage(${1:pkg})" },
{ "trigger": "inspect", "contents": "inspect(${1:symbol})" },
{ "trigger": "methodExists", "contents": "methodExists(${1:func})" },
{ "trigger": "methodExists", "contents": "methodExists(${1:mod}, ${2:func})" }
,
{ "trigger": "methodInfo", "contents": "methodInfo(${1:func})" },
{ "trigger": "methodInfo", "contents": "methodInfo(${1:mod}, ${2:func})" }
,
{ "trigger": "methods", "contents": "methods()" },
{ "trigger": "symbolExists", "contents": "symbolExists(${1:symbol})" },
{ "trigger": "symbols", "contents": "symbols()" },
{ "trigger": "value", "contents": "value(${1:symbol})" },
{ "trigger": "getMatches", "contents": "getMatches(${1:str}, ${2:pattern})" },
{ "trigger": "matches", "contents": "matches(${1:str}, ${2:pattern})" },
{ "trigger": "postMatch", "contents": "postMatch(${1:str}, ${2:pattern})" },
{ "trigger": "preMatch", "contents": "preMatch(${1:str}, ${2:pattern})" },
{ "trigger": "xreplace", "contents": "xreplace(${1:str}, ${2:pattern}, ${3:repl})" },
{ "trigger": "xreplaceFirst", "contents": "xreplaceFirst(${1:str}, ${2:pattern}, ${3:repl})" },
{ "trigger": "xsplit", "contents": "xsplit(${1:str}, ${2:pattern})" },
{ "trigger": "chomp", "contents": "chomp(${1:str})" },
{ "trigger": "chop", "contents": "chop(${1:str})" },
{ "trigger": "endsWith", "contents": "endsWith(${1:str}, ${2:what})" },
{ "trigger": "find", "contents": "find(${1:str}, ${2:what})" },
{ "trigger": "isEmpty", "contents": "isEmpty(${1:str})" },
{ "trigger": "isNumeric", "contents": "isNumeric(${1:str})" },
{ "trigger": "justify", "contents": "justify(${1:str}, ${2:padding})" },
{ "trigger": "justifyCenter", "contents": "justifyCenter(${1:str}, ${2:padding})" },
{ "trigger": "justifyRight", "contents": "justifyRight(${1:str}, ${2:padding})" },
{ "trigger": "lcase", "contents": "lcase(${1:str})" },
{ "trigger": "lcaseFirst", "contents": "lcaseFirst(${1:str})" },
{ "trigger": "ltrim", "contents": "ltrim(${1:str})" },
{ "trigger": "rtrim", "contents": "rtrim(${1:str})" },
{ "trigger": "soundex", "contents": "soundex(${1:str})" },
{ "trigger": "startsWith", "contents": "startsWith(${1:str}, ${2:what})" },
{ "trigger": "trim", "contents": "trim(${1:str})" },
{ "trigger": "ucase", "contents": "ucase(${1:str})" },
{ "trigger": "ucaseFirst", "contents": "ucaseFirst(${1:str})" },
{ "trigger": "execute", "contents": "execute(${1:command})" },
{ "trigger": "isArray", "contents": "isArray(${1:arg})" },
{ "trigger": "isBoolean", "contents": "isBoolean(${1:arg})" },
{ "trigger": "isDictionary", "contents": "isDictionary(${1:arg})" },
{ "trigger": "isNumber", "contents": "isNumber(${1:arg})" },
{ "trigger": "isString", "contents": "isString(${1:arg})" },
{ "trigger": "string", "contents": "string(${1:arg})" },
{ "trigger": "type", "contents": "type(${1:arg})" },
{ "trigger": "check", "contents": "check(${1:xml})" },
{ "trigger": "generate", "contents": "generate(${1:object})" },
{ "trigger": "parse", "contents": "parse(${1:yaml})" }
]}