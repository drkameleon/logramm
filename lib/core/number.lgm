/**********************************************************
 **
 ** LOGRAMM
 ** Interpreter
 ** 
 ** (c) 2009-2014, Dr.Kameleon
 **
 **********************************************************
 ** lib/core/number.lgm
 **********************************************************/

//================================================
// Module definition
//================================================

Number :: 
{

	//================================================
	// External D-bindings
	//================================================

	external fromBase(str,n) # [
		.params		: "string,number",
		.returns 	: "number",
		.help 		: "Returns number, given its base-n representation in string"
	] => "number.fromBase";

	external sin(x) # [
		.params		: "number",
		.returns 	: "number",
		.help 		: "Returns sine of 'x'"
	] =>  "number.sin";

	external cos(x) # [
		.params		: "number",
		.returns 	: "number",
		.help 		: "Returns cosine of 'x'"
	] =>  "number.cos";

	external tan(x) # [
		.params		: "number",
		.returns 	: "number",
		.help 		: "Returns tangent of 'x'"
	] =>  "number.tan";

	external sinh(x) # [
		.params		: "number",
		.returns 	: "number",
		.help 		: "Returns hyperbolic sine of 'x'"
	] =>  "number.sinh";

	external cosh(x) # [
		.params		: "number",
		.returns 	: "number",
		.help 		: "Returns hyperbolic cosine of 'x'"
	] =>  "number.cosh";

	external tanh(x) # [
		.params		: "number",
		.returns 	: "number",
		.help 		: "Returns hyperbolic tangent of 'x'"
	] =>  "number.tanh";

	external arcsin(x) # [
		.params		: "number",
		.returns 	: "number",
		.help 		: "Returns arc sine of 'x'"
	] =>  "number.arcsin";

	external arccos(x) # [
		.params		: "number",
		.returns 	: "number",
		.help 		: "Returns arc cosine of 'x'"
	] =>  "number.arccos";

	external arctan(x) # [
		.params		: "number",
		.returns 	: "number",
		.help 		: "Returns arc tangent of 'x'"
	] =>  "number.arctan";

	external arcsinh(x) # [
		.params		: "number",
		.returns 	: "number",
		.help 		: "Returns inverse hyperbolic sine of 'x'"
	] =>  "number.arcsinh";

	external arccosh(x) # [
		.params		: "number",
		.returns 	: "number",
		.help 		: "Returns inverse hyperbolic cosine of 'x'"
	] =>  "number.arccosh";

	external arctanh(x) # [
		.params		: "number",
		.returns 	: "number",
		.help 		: "Returns inverse hyperbolic tangent of 'x'"
	] =>  "number.arctanh";

	external floor(x) # [
		.params		: "number",
		.returns 	: "number",
		.help 		: "Returns 'x', rounded downwards"
	] =>  "number.floor";

	external ceil(x) # [
		.params		: "number",
		.returns 	: "number",
		.help 		: "Returns 'x', rounded upwards"
	] =>  "number.ceil";

	external round(x) # [
		.params		: "number",
		.returns 	: "number",
		.help 		: "Returns 'x', rounded to the nearest integer"
	] =>  "number.round";

	external ln(x) # [
		.params		: "number",
		.returns 	: "number",
		.help 		: "Returns the natural logarithm of 'x'"
	] =>  "number.ln";

	external log(x) # [
		.params		: "number",
		.returns 	: "number",
		.help 		: "Returns the base-10 logarithm of 'x'"
	] =>  "number.log";

	external pow(x,y) # [
		.params		: "number,number",
		.returns 	: "number",
		.help 		: "Returns 'x' raised to the power of 'y'"
	] =>  "number.pow";

	external exp(x) # [
		.params		: "number",
		.returns 	: "number",
		.help 		: "Returns exponential of 'x'"
	] =>  "number.exp";

	external sqrt(x) # [
		.params		: "number",
		.returns 	: "number",
		.help 		: "Returns square root of 'x'"
	] =>  "number.sqrt";

	external trunc(x) # [
		.params		: "number",
		.returns 	: "number",
		.help 		: "Returns integer portion of 'x'"
	] =>  "number.trunc";

	external e() # [
		.params		: "",
		.returns    : "number",
		.help		: "Returns E constant"
	] => "number.e";

	external pi() # [
		.params		: "",
		.returns 	: "number",
		.help 		: "Returns Pi constant"
	] => "number.pi";

	//================================================
	// Functions
	//================================================

	fromBin(str) # [
		.params		: "string",
		.returns 	: "number",
		.help 		: "Returns number, given its binary representation in string"
	] => fromBase(str,2);

	fromHex(str) # [
		.params		: "string",
		.returns 	: "number",
		.help 		: "Returns number, given its hexadecimal representation in string"
	] => fromBase(str,16);

	fromOct(str) # [
		.params		: "string",
		.returns 	: "number",
		.help 		: "Returns number, given its octal representation in string"
	] => fromBase(str,8);

	number(str) # [
		.params		: "string",
		.returns 	: "number",
		.help 		: "Returns number from string"
	] => fromBase(str,10);

	abs(x) # [
		.params		: "number",
		.returns    : "number",
		.help		: "Returns the absolute value of 'n'"
	] =>
	{
		x>=0    :==> x;
		else	:==> -x;
	}

}
